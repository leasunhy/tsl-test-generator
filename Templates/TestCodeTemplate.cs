// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace TSLTestGenerator.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using TSLTestGenerator.DataModel;
    using TSLTestGenerator.Templates;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class TestCodeTemplate : TestCodeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n\r\nnamespace GeneratedTest_");
            
            #line 10 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Script.RandomSeedForGeneration));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class Test_");
            
            #line 12 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Script.RandomSeedForGeneration));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 14 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

        foreach (var e in Script.Enums)
            GenerateTestCodeForEnum(e);
        foreach (var e in Script.Protocols)
            GenerateTestCodeForProtocol(e);
        foreach (var e in Script.Servers)
            GenerateTestCodeForServer(e);
        foreach (var e in Script.Proxies)
            GenerateTestCodeForProxy(e);
        foreach (var e in Script.Modules)
            GenerateTestCodeForModule(e);
        foreach (var e in Script.Structs)
            GenerateTestCodeForStruct(e);
        foreach (var e in Script.Cells)
            GenerateTestCodeForCell(e);

            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 33 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

    protected void GenerateTestCodeForEnum(TSLEnum e)
    {
        
        #line default
        #line hidden
        
        #line 35 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("\r\n        [Test]\r\n        public void TestEnum_");

        
        #line default
        #line hidden
        
        #line 38 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(e.Name));

        
        #line default
        #line hidden
        
        #line 38 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("\r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 40 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

        int defaultValue = 0;
        foreach (var member in e.Members)
        {
            if (member.Value == null)
            {

        
        #line default
        #line hidden
        
        #line 46 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("            Assert.That((int)");

        
        #line default
        #line hidden
        
        #line 47 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(e.Name));

        
        #line default
        #line hidden
        
        #line 47 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 47 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(member.Key));

        
        #line default
        #line hidden
        
        #line 47 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(", Is.EqualTo(");

        
        #line default
        #line hidden
        
        #line 47 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(defaultValue++));

        
        #line default
        #line hidden
        
        #line 47 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("));\r\n");

        
        #line default
        #line hidden
        
        #line 48 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

            }
            else
            {

        
        #line default
        #line hidden
        
        #line 52 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("            Assert.That((int)");

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(e.Name));

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(member.Key));

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(", Is.EqualTo(");

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(member.Value));

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("));\r\n");

        
        #line default
        #line hidden
        
        #line 54 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

                defaultValue = member.Value.Value + 1;
            }
        }

        
        #line default
        #line hidden
        
        #line 58 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("        }\r\n");

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
 }

        
        #line default
        #line hidden
        
        #line 63 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

    protected void GenerateTestCodeForStruct(TSLStruct e)
    {
        
        #line default
        #line hidden
        
        #line 65 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("\r\n        [Test]\r\n        public void TestStruct_");

        
        #line default
        #line hidden
        
        #line 68 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(e.Name));

        
        #line default
        #line hidden
        
        #line 68 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("\r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 70 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

        GenerateTestCodeForStructFieldTypes(e);
        // check if the struct is used by some protocol
        // if there are no reader/writer definitions for the struct,
        // we simply test the type of the fields
        if (StructsUsedInProtocols.Contains(e))
            GenerateTestCodeForStructThatHasWriter(e);

        
        #line default
        #line hidden
        
        #line 77 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("        }\r\n");

        
        #line default
        #line hidden
        
        #line 79 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
 }

        
        #line default
        #line hidden
        
        #line 82 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

    protected void GenerateTestCodeForStructFieldTypes(TSLStruct e)
    {
        var varName = $"fieldTypeTest_{e.Name}";

        
        #line default
        #line hidden
        
        #line 86 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("            var ");

        
        #line default
        #line hidden
        
        #line 87 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 87 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(" = new ");

        
        #line default
        #line hidden
        
        #line 87 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(e.Name));

        
        #line default
        #line hidden
        
        #line 87 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("();\r\n");

        
        #line default
        #line hidden
        
        #line 88 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

        foreach (var field in e.Fields)
        {

        
        #line default
        #line hidden
        
        #line 91 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("            Assert.That(typeof(");

        
        #line default
        #line hidden
        
        #line 92 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 92 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 92 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));

        
        #line default
        #line hidden
        
        #line 92 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("), Is.TypeOf<");

        
        #line default
        #line hidden
        
        #line 92 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Type.ClrTypeName));

        
        #line default
        #line hidden
        
        #line 92 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(">());\r\n");

        
        #line default
        #line hidden
        
        #line 93 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

        }
    }

        
        #line default
        #line hidden
        
        #line 98 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

    protected void GenerateTestCodeForStructThatHasWriter(TSLStruct e)
    {
        
        #line default
        #line hidden
        
        #line 100 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("            var writer_ = new ");

        
        #line default
        #line hidden
        
        #line 101 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(e.Name));

        
        #line default
        #line hidden
        
        #line 101 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("Writer();\r\n");

        
        #line default
        #line hidden
        
        #line 102 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

        var assertActions = new List<Action>();
        foreach (var field in e.Fields)
        {
            var assertAction = GenerateTestCodeForField(Context, e, field, "writer_");
            assertActions.Add(assertAction);
        }

        // we assert the values of the fields again after they have been modified
        foreach (var action in assertActions)
        {
            action?.Invoke();
        }
    }

        
        #line default
        #line hidden
        
        #line 118 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

    protected void GenerateTestCodeForCell(TSLCell e)
    {
        
        #line default
        #line hidden
        
        #line 120 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("\r\n        [Test]\r\n        public void TestCell_");

        
        #line default
        #line hidden
        
        #line 123 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(e.Name));

        
        #line default
        #line hidden
        
        #line 123 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("\r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 125 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

        // TODO(leasunhy): cell-specific tests

        
        #line default
        #line hidden
        
        #line 127 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
this.Write("        }\r\n");

        
        #line default
        #line hidden
        
        #line 129 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"
 }

        
        #line default
        #line hidden
        
        #line 132 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

    protected void GenerateTestCodeForProtocol(TSLProtocol e)
    {
    }

        
        #line default
        #line hidden
        
        #line 138 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

    protected void GenerateTestCodeForServer(TSLServer e)
    {
    }

        
        #line default
        #line hidden
        
        #line 144 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

    protected void GenerateTestCodeForProxy(TSLProxy e)
    {
    }

        
        #line default
        #line hidden
        
        #line 150 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\TestCodeTemplate.tt"

    protected void GenerateTestCodeForModule(TSLModule e)
    {
    }

        
        #line default
        #line hidden
        
        #line 8 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"

// this method returns an action to generate assert statements for later use
private Action GenerateTestCodeForField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string structVarName)
{
    Action assertAction;
    switch (field.Type.FieldType)
    {
        case TSLFieldTypes.Enum:
            assertAction = GenerateTestCodeForEnumField(context, struct_, field, structVarName);
            break;
        case TSLFieldTypes.Array:
            assertAction = GenerateTestCodeForArrayField(context, struct_, field, structVarName);
            break;
        case TSLFieldTypes.Atom:
            assertAction = GenerateTestCodeForAtomField(context, struct_, field, structVarName);
            break;
        case TSLFieldTypes.List:
            assertAction = GenerateTestCodeForListField(context, struct_, field, structVarName);
            break;
        case TSLFieldTypes.Struct:
            assertAction = GenerateTestCodeForStructField(context, struct_, field, structVarName);
            break;
        default:
            throw new NotImplementedException();
    }
    assertAction?.Invoke();
    return assertAction;
}

        
        #line default
        #line hidden
        
        #line 38 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"

private Action GenerateTestCodeForEnumField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string structVarName)
{
    var fieldType = (TSLEnum)field.Type;
    var randomMember = fieldType.Members.Choice(context.MasterRandom).Key;
    var enumMember = $"{fieldType.Name}.{randomMember}";
    var structMember = $"{structVarName}.{field.Name}";

        
        #line default
        #line hidden
        
        #line 45 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write("\r\n            ");

        
        #line default
        #line hidden
        
        #line 47 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture($"{structMember} = {enumMember};"));

        
        #line default
        #line hidden
        
        #line 47 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 48 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
 return () =>
    {

        
        #line default
        #line hidden
        
        #line 50 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write("            Assert.That(");

        
        #line default
        #line hidden
        
        #line 51 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(structMember));

        
        #line default
        #line hidden
        
        #line 51 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write(", Is.EqualTo(");

        
        #line default
        #line hidden
        
        #line 51 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(enumMember));

        
        #line default
        #line hidden
        
        #line 51 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write("));\r\n            Assert.That(");

        
        #line default
        #line hidden
        
        #line 52 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture($"(({struct_.Name}){structVarName}).{field.Name}"));

        
        #line default
        #line hidden
        
        #line 52 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write(", Is.EqualTo(");

        
        #line default
        #line hidden
        
        #line 52 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(enumMember));

        
        #line default
        #line hidden
        
        #line 52 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write("));\r\n            Assert.That(");

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture($"((new {struct_.Name}Reader({structVarName}.CellPtr, 0)){structVarName}).{field.Name}"));

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write(", Is.EqualTo(");

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(enumMember));

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"
this.Write("));\r\n");

        
        #line default
        #line hidden
        
        #line 54 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"

    };

        
        #line default
        #line hidden
        
        #line 57 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"

}

        
        #line default
        #line hidden
        
        #line 61 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"

private Action GenerateTestCodeForArrayField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string structVarName)
{

        
        #line default
        #line hidden
        
        #line 66 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"

    return () => {};
}

        
        #line default
        #line hidden
        
        #line 71 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"

private Action GenerateTestCodeForAtomField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string structVarName)
{
    return () => {};
}

        
        #line default
        #line hidden
        
        #line 78 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"

private Action GenerateTestCodeForListField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string structVarName)
{
    return () => {};
}

        
        #line default
        #line hidden
        
        #line 85 "C:\Users\v-siyul.FAREAST\Documents\Visual Studio 2017\Projects\TSLTestGenerator\TSLTestGenerator\Templates\FieldTestCodeTemplate.tt"

private Action GenerateTestCodeForStructField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string structVarName)
{
    return () => {};
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class TestCodeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
