<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TSLTestGenerator.DataModel" #>
<#@ import namespace="TSLTestGenerator.Templates" #>

<#+
// this method returns an action to generate assert statements for later use
private Action GenerateTestCodeForField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string structVarName)
{
    Action assertAction;
    switch (field.Type.FieldType)
    {
        case TSLFieldTypes.Enum:
            assertAction = GenerateTestCodeForEnumField(context, struct_, field, structVarName);
            break;
        case TSLFieldTypes.Array:
            assertAction = GenerateTestCodeForArrayField(context, struct_, field, structVarName);
            break;
        case TSLFieldTypes.Atom:
            assertAction = GenerateTestCodeForAtomField(context, struct_, field, structVarName);
            break;
        case TSLFieldTypes.List:
            assertAction = GenerateTestCodeForListField(context, struct_, field, structVarName);
            break;
        case TSLFieldTypes.Struct:
            assertAction = GenerateTestCodeForStructField(context, struct_, field, structVarName);
            break;
        default:
            throw new NotImplementedException();
    }
    assertAction?.Invoke();
    return assertAction;
}
#>

<#+
private Action GenerateTestCodeForEnumField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string structVarName)
{
    var fieldType = (TSLEnum)field.Type;
    var randomMember = fieldType.Members.Choice(context.MasterRandom).Key;
    var enumMember = $"{fieldType.Name}.{randomMember}";
    var structMember = $"{structVarName}.{field.Name}";
#>

            <#= $"{structMember} = {enumMember};" #>
<#+ return () =>
    {
#>
            Assert.That(<#= structMember #>, Is.EqualTo(<#= enumMember #>));
            Assert.That(<#= $"(({struct_.Name}){structVarName}).{field.Name}" #>, Is.EqualTo(<#= enumMember #>));
            Assert.That(<#= $"((new {struct_.Name}Reader({structVarName}.CellPtr, 0)){structVarName}).{field.Name}" #>, Is.EqualTo(<#= enumMember #>));
<#+
    };
#>
<#+
}
#>

<#+
private Action GenerateTestCodeForArrayField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string structVarName)
{
#>

<#+
    return () => {};
}
#>

<#+
private Action GenerateTestCodeForAtomField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string structVarName)
{
    return () => {};
}
#>

<#+
private Action GenerateTestCodeForListField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string structVarName)
{
    return () => {};
}
#>

<#+
private Action GenerateTestCodeForStructField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string structVarName)
{
    return () => {};
}
#>
