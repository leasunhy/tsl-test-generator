<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Security.Permissions" #>
<#@ import namespace="TSLTestGenerator.DataModel" #>
<#@ import namespace="TSLTestGenerator.Templates" #>

<#+
// this method returns an action to generate assert statements for later use
private Action GenerateTestCodeForField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string writerVarName)
{
    Action assertAction = null;
    switch (field.Type.FieldType)
    {
        case TSLFieldTypes.Enum:
            assertAction = GenerateTestCodeForEnumField(context, struct_, field, writerVarName);
            break;
        case TSLFieldTypes.Array:
            //assertAction = GenerateTestCodeForArrayField(context, struct_, field, writerVarName);
            break;
        case TSLFieldTypes.Atom:
            //assertAction = GenerateTestCodeForAtomField(context, struct_, field, writerVarName);
            break;
        case TSLFieldTypes.List:
            //assertAction = GenerateTestCodeForListField(context, struct_, field, writerVarName);
            break;
        case TSLFieldTypes.Struct:
            //assertAction = GenerateTestCodeForStructField(context, struct_, field, writerVarName);
            break;
        default:
            throw new NotImplementedException();
    }
    assertAction?.Invoke();
    return assertAction;
}
#>

<#+
private Action GenerateTestCodeForEnumField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string writerVarName)
{
    var fieldType = (TSLEnum)field.Type;
    var randomMember = fieldType.Members.Choice(context.MasterRandom);
    var enumMember = $"{fieldType.Name}.{randomMember.Item1}";
    var structMember = $"{writerVarName}.{field.Name}";
#>

            <#= $"{structMember} = {enumMember};" #>
<#+ return () =>
    {
#>
            Assert.That(<#= structMember #>, Is.EqualTo(<#= enumMember #>));
            Assert.That(<#= $"(({struct_.Name}){writerVarName}).{field.Name}" #>, Is.EqualTo(<#= enumMember #>));
            Assert.That(<#= $"(new {struct_.Name}Reader({writerVarName}.CellPtr, 0)).{field.Name}" #>, Is.EqualTo(<#= enumMember #>));
<#+
    };
}
#>

<#+
private Action GenerateTestCodeForArrayField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string writerVarName)
{
    var fieldType = (ArrayType)field.Type;
    var randomArray = fieldType.GetRandomValue(context.MasterRandom);
    var parentMember = $"{writerVarName}.{field.Name}";
    var tempVarName = $"structFieldTestValue{++context.GeneratedCount}";
    // TODO(leasunhy): support struct arrays
    if (fieldType.ElementType.FieldType == TSLFieldTypes.Struct)
        return null;
#>
        var <#= tempVarName #> = <#= randomArray #>;
        <#= parentMember #> = <#= tempVarName #>;
<#+
    return () =>
    {
#>
        Assert.That(<#= parentMember #>, Is.EqualTo(<#= tempVarName #>));
        Assert.That(<#= $"(({struct_.Name}){writerVarName}).{field.Name}" #>, Is.EqualTo(<#= tempVarName #>));
        Assert.That(<#= $"(new {struct_.Name}Reader({writerVarName}.CellPtr, 0)).{field.Name}" #>, Is.EqualTo(<#= tempVarName #>));
<#+
    };
}
#>

<#+
private Action GenerateTestCodeForAtomField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string writerVarName)
{
    var fieldType = (AtomType)field.Type;
    var randomValue = fieldType.GetRandomValue(context.MasterRandom);
    var parentMember = $"{writerVarName}.{field.Name}";
    var tempVarName = $"structFieldTestValue{++context.GeneratedCount}";
#>
        var <#= tempVarName #> = <#= randomValue #>;
        <#= parentMember #> = <#= tempVarName #>;
<#+
    return () =>
    {
#>
        Assert.That(<#= parentMember #>, Is.EqualTo(<#= tempVarName #>));
        Assert.That(<#= $"(({struct_.Name}){writerVarName}).{field.Name}" #>, Is.EqualTo(<#= tempVarName #>));
        Assert.That(<#= $"(new {struct_.Name}Reader({writerVarName}.CellPtr, 0)).{field.Name}" #>, Is.EqualTo(<#= tempVarName #>));
<#+
    };
}
#>

<#+
private Action GenerateTestCodeForListField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string writerVarName)
{
    var fieldType = (ListType)field.Type;
    var randomValue = fieldType.GetRandomValue(context.MasterRandom);
    var parentMember = $"{writerVarName}.{field.Name}";
    var tempVarName = $"structFieldTestValue{++context.GeneratedCount}";
    // TODO(leasunhy): support struct lists
    if (fieldType.ElementType.FieldType == TSLFieldTypes.Struct)
        return null;
#>
        var <#= tempVarName #> = <#= randomValue #>;
        <#= parentMember #> = <#= tempVarName #>;
<#+
    return () =>
    {
#>
        Assert.That(<#= parentMember #>, Is.EqualTo(<#= tempVarName #>));
        Assert.That(<#= $"(({struct_.Name}){writerVarName}).{field.Name}" #>, Is.EqualTo(<#= tempVarName #>));
        Assert.That(<#= $"(new {struct_.Name}Reader({writerVarName}.CellPtr, 0)).{field.Name}" #>, Is.EqualTo(<#= tempVarName #>));
<#+
    };
}
#>

<#+
private Action GenerateTestCodeForStructField(TestCodeGeneratorContext context, TSLStruct struct_, TSLField field, string writerVarName)
{
    return () => {};
}
#>
