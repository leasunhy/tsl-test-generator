<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TSLTestGenerator.DataModel" #>
<#@ import namespace="TSLTestGenerator.Templates" #>
<#@ include file="FieldTestCodeTemplate.tt" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using NUnit.Framework;
using Trinity;

namespace <#= Context.TestName #>
{
    public unsafe class Test_<#= Element.Name #>_<#= Context.Script.RandomSeedForGeneration #>
    {
<#
        switch (Element)
        {
            case TSLEnum e: GenerateTestCodeForEnum(e); break;
            case TSLProtocol e: GenerateTestCodeForProtocol(e); break;
            case TSLServer e: GenerateTestCodeForServer(e); break;
            case TSLProxy e: GenerateTestCodeForProxy(e); break;
            case TSLModule e: GenerateTestCodeForModule(e); break;
            case TSLStruct e: GenerateTestCodeForStruct(e); break;
            case TSLCell e: GenerateTestCodeForCell(e); break;
            default: throw new NotImplementedException();
        }
#>
    }
}

<#+
    protected void GenerateTestCodeForEnum(TSLEnum e)
    {#>

        [Test]
        public void TestEnum_<#= e.Name #>()
        {
<#+
        int defaultValue = 0;
        foreach (var (key, value) in e.Members)
        {
            if (value == null)
            {
#>
            Assert.That((int)<#= e.Name #>.<#= key #>, Is.EqualTo(<#= defaultValue++ #>));
<#+
            }
            else
            {
#>
            Assert.That((int)<#= e.Name #>.<#= key #>, Is.EqualTo(<#= value #>));
<#+
                defaultValue = value.Value + 1;
            }
        }
#>
        }
<#+ }
#>

<#+
    protected void GenerateTestCodeForStruct(TSLStruct e)
    {#>

        [Test]
        public void TestStruct_<#= e.Name #>()
        {
<#+
        GenerateTestCodeForStructFieldTypes(e);
        // check if the struct is used by some protocol
        // if there are no reader/writer definitions for the struct,
        // we simply test the type of the fields
        if (Context.StructsUsedInProtocols.Contains(e))
            GenerateTestCodeForStructThatHasWriter(e);
#>
        }
<#+ }
#>

<#+
    protected void GenerateTestCodeForStructFieldTypes(TSLStruct e)
    {
        var varName = $"fieldTypeTest_{e.Name}";
#>
            //var <#= varName #> = new <#= e.Name #>();
<#+
        foreach (var field in e.Fields)
        {
            if (field.IsNullable)
            {
#>
            Utils.AssertFieldType(typeof(<#= e.ClrTypeName #>), "<#= field.Name #>", typeof(<#= field.Type.ClrTypeName #>?));
<#+
            }
            else
            {
#>
            //Assert.That(typeof(<#= varName #>.<#= field.Name #>), Is.TypeOf<<#= field.Type.ClrTypeName #>>());
            Utils.AssertFieldType(typeof(<#= e.ClrTypeName #>), "<#= field.Name #>", typeof(<#= field.Type.ClrTypeName #>));
<#+
            }
        }
    }
#>

<#+
    protected void GenerateTestCodeForStructThatHasWriter(TSLStruct e)
    {#>
            var writer_ = new <#= e.Name #>Writer();
<#+
        var assertActions = new List<Action>();
        foreach (var field in e.Fields)
        {
            var assertAction = GenerateTestCodeForField(Context, e, field, "writer_");
            assertActions.Add(assertAction);
        }

        // we assert the values of the fields again after they have been modified
        foreach (var action in assertActions)
        {
            action?.Invoke();
        }
    }
#>

<#+
    protected void GenerateTestCodeForCell(TSLCell e)
    {#>

        [Test]
        public void TestCell_<#= e.Name #>()
        {
<#+
        // TODO(leasunhy): cell-specific tests
#>
        }
<#+ }
#>

<#+
    protected void GenerateTestCodeForProtocol(TSLProtocol e)
    {
    }
#>

<#+
    protected void GenerateTestCodeForServer(TSLServer e)
    {
    }
#>

<#+
    protected void GenerateTestCodeForProxy(TSLProxy e)
    {
    }
#>

<#+
    protected void GenerateTestCodeForModule(TSLModule e)
    {
    }
#>
